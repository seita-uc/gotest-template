{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
				{{Param .}} {{.Type}}
		{{- end}}
	}
	{{- end}}
	tests := []struct {
		name string
		{{- if .TestParameters}}
			args args
		{{- end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
    err    error
    before func(c *spanner.Client)
    after  func(c *spanner.Client)
	}{
		// TODO: Add test cases.
	}
	for {{if (or .Subtests (not .IsNaked))}} _, tt := {{end}} range tests {
        {{- if .Subtests }}t.Run(tt.name, func(t *testing.T) { {{- end -}}
          c, s := newClients(t)
          tt.before(c)
          defer tt.after(c)

			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}
			{{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}}
			{{- end}}
			{{- if .ReturnsError}}
				if {{if .OnlyReturnsError}} err := {{template "call" $f}}; {{end}} tt.err != nil && err != nil {
          assert.Cmp(t, tt.err.Error(), err.Error())
        } else {
          assert.CmpErr(t, tt.err, err)
				}
			{{- end}}
      {{- range .TestResults}}
				{{- if .IsWriter}}
					if {{Got .}} := {{Param .}}.String(); {{Got .}} != tt.{{Want .}} {
				{{- else if .IsBasicType}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} {{Got .}} != nil {
            assert.Cmp(t, tt.want, got, cmpopts.IgnoreFields(*got, ""))
          } else {
            assert.Cmp(t, tt.want, got)
				{{- else}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} {{Got .}} != nil {
            assert.Cmp(t, tt.want, got, cmpopts.IgnoreFields(*got, ""))
          } else {
            assert.Cmp(t, tt.want, got)
				{{- end}}
				}
			{{- end}}
		{{- if .Subtests }} }) {{- end -}}
	}
}

{{end}}
